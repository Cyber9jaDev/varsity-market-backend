generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String   @db.VarChar(255)
  password          String   @db.VarChar(255)
  phone             String   @unique
  userType          UserType
  hasDisplayPicture Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  displayPicture Picture?

  products Product[]

  cart Cart? // One active cart per user

  orders Order[] // Historical orders
}

model Product {
  id          String @id @default(uuid())
  name        String
  price       Float
  description String

  location  Location
  condition ConditionType
  category  CategoryType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String

  images Image[]

  cartItems CartItem[] // Products can appear in multiple cart items
  OrderItem OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  cartItems CartItem[]
  buyer     User       @relation(fields: [buyerId], references: [id])
  buyerId   String     @unique // The unique attribute ensures that only one user is connected to a cart
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String // Not unique to allow multiple cart entries in different carts
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  buyer      User        @relation(fields: [buyerId], references: [id])
  buyerId    String
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Picture {
  id       String  @id @default(uuid())
  publicId String?
  url      String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model Message {
  id       String  @id @default(uuid())
  message  String?
  senderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  BUYER
  SELLER
  ADMIN
}

enum Location {
  UI
  FUNAAB
  OAU
  ABU
  BUK
  LASPOTECH
  POLYIBADAN
  OSCOTECH
  IREPOLY
  FUTA
  ACU
}

enum CategoryType {
  PET
  CAR
  PHONE
  LAPTOP
  COMPUTER
  ACCESSORIES
  BIKE
  FURNITURE
  BOOK
  FASHION
  ACCOMMODATION
}

enum ConditionType {
  NEW 
  USED
  REFURBISHED
}
