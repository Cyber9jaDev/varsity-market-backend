generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Payment{
  id            String            @id @default(uuid())  
  quantity      Int
  amount        Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        PaymentStatus
  reference     String            @unique
  // buyer         User
  // seller        User
  // product       Product
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String            @db.VarChar(255)
  password          String            @db.VarChar(255)
  phone             String            @unique
  userType          UserType
  businessName      String?
  bankCode          String?
  accountNumber     String?           @db.VarChar(10)
  hasDisplayPicture Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  displayPicture    Picture?
  products          Product[]
  cart              Cart? // One active cart per user
  orders            Order[] // Historical orders
  sentMessages      Message[]         @relation("sentMessages")
  chats             ChatParticipant[]
}

model Message {
  id       String   @id @default(uuid())
  content  String
  sentAt   DateTime @default(now())
  sender   User     @relation(name: "sentMessages", fields: [senderId], references: [id])
  senderId String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
}

model Chat {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  chat          Chat   @relation(fields: [chatId], references: [id])
  chatId        String
  participant   User   @relation(fields: [participantId], references: [id])
  participantId String

  @@id([chatId, participantId]) 
}

model Product {
  id          String        @id @default(uuid())
  name        String
  price       Float         
  quantity    Int           @default(1)
  description String
  location    Location
  condition   ConditionType
  category    CategoryType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  seller      User          @relation(fields: [sellerId], references: [id])
  sellerId    String
  images      Image[]
  cartItems   CartItem[] // Products can appear in multiple cart items
  OrderItem   OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  cartItems CartItem[]
  buyer     User       @relation(fields: [buyerId], references: [id])
  buyerId   String     @unique // The unique attribute ensures that only one user is connected to a cart
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String // Not unique to allow multiple cart entries in different carts
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  buyer      User        @relation(fields: [buyerId], references: [id])
  buyerId    String
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id         String  @id @default(uuid())
  secure_url String
  public_id  String
  asset_id   String
  product    Product @relation(fields: [productId], references: [id])
  productId  String
}
                                                              
model Picture {
  id         String  @id @default(uuid())
  secure_url String?
  public_id  String?
  asset_id   String?
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
}

enum UserType {
  BUYER
  SELLER
  ADMIN
}

enum Location {
  UI
  FUNAAB
  OAU
  ABU
  BUK
  LASPOTECH
  POLYIBADAN
  FUTA
  ACU
  UNILAG
  UNIBEN
}

enum CategoryType {
  PET
  CAR
  PHONE
  LAPTOP
  COMPUTER
  ACCESSORIES
  BIKE
  FURNITURE
  BOOK
  FASHION
  ACCOMMODATION
}

enum ConditionType {
  NEW
  USED
  REFURBISHED
}

