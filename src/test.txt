eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIyNTMyY2FkYy03YjNjLTQyMGItOWY4Yi1jM2NkYmVjNzNlNjkiLCJuYW1lIjoiU2VsbGVyIDEiLCJpYXQiOjE3MzIwMTM1MjUsImV4cCI6MTczMjA5OTkyNX0.DOaAoyi4gLjntEjLktOFKlSSZ7nQ70xprlkqeQ_4QQE









BUYER
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIzMTUyNzdhYS01YzY0LTQyMDQtYmY1Zi00MmFjOGVhZTlmODkiLCJuYW1lIjoiQnV5ZXIgMSIsImlhdCI6MTczMjA5OTU2OCwiZXhwIjoxNzMyMTg1OTY4fQ.aSziOtE4ATwlnzYfLJCe_-vKXkOMg4Xnq3ifCS2XRkI



import { BadRequestException, Injectable } from '@nestjs/common';
import { CreateSubaccount, SubaccountResponse } from '../interface/payment.interface';
import APICall from 'src/helpers/APICall';
import { User } from '@prisma/client';
import { getBankCode } from 'src/helpers/helpers';

// const body = {
//   business_name: 'Varsity Leave me alone',
//   settlement_bank: '058',
//   account_number: '0123456789',
//   percentage_charge: 10,
// };

// console.log(await getBankCode(product.seller.bankName));

@Injectable()
export class PaystackService {
  async createSubaccount(body: CreateSubaccount): Promise<SubaccountResponse> {
    console.log(body);
    try {
      const data = await APICall<SubaccountResponse>(
        '/subaccount',
        'POST',
        {
          business_name: 'Arike Gold Pre-order',
          bank_code: '044',
          account_number: '0122022262',
          percentage_charge: 2.5
        },
      );
      return data;
    } catch (error) {
      throw new BadRequestException(error.message);
    }
  }
}



import {
  BadRequestException,
  Body,
  Controller,
  Get,
  Post,
  UnauthorizedException,
} from '@nestjs/common';
import { DatabaseService } from 'src/database/database.service';
import { ProductService } from 'src/product/product.service';
import { CreateSubaccountDto } from './dtos/payment.dto';
import { User } from 'src/user/decorators/user.decorator';
import { UserEntity } from 'src/user/interface/user.interface';
import { ApiBody } from '@nestjs/swagger';
import { PaymentService } from './payment.service';
import { createSubaccount } from '../helpers/helpers';

import {
  CreateSubaccount,
  SubaccountResponse,
} from './interface/payment.interface';
import { getBankCode } from 'src/helpers/helpers';

@Controller('payment')
export class PaymentController {
  constructor(
    private readonly productService: ProductService,
    private readonly databaseService: DatabaseService,
    private readonly paymentService: PaymentService,
  ) {}

  @Post('/initialize-transaction')
  @ApiBody({
    required: true,
    description: 'Create a subaccount for seller',
    type: CreateSubaccountDto,
  })
  async createSubaccount(
    @Body() createSubaccountDto: CreateSubaccountDto,
    @User() user: UserEntity,
  ): Promise<SubaccountResponse> {
    // Check if buyer has an account
    const buyer = await this.databaseService.user.findUnique({
      where: { id: user.userId },
    });

    if (!buyer) {
      throw new UnauthorizedException(
        'You are not allowed to buy this product',
      );
    }

    const product = await this.databaseService.product.findUnique({
      where: { id: createSubaccountDto.productId },
      select: { seller: true, quantity: true },
    });

    if (!product) {
      throw new UnauthorizedException('This product does not exist');
    }

    if (createSubaccountDto.quantity > product.quantity) {
      throw new BadRequestException(
        `Only ${product.quantity} items available in stock`,
      );
    }

    const createSubaccount: CreateSubaccount = {
      business_name: product.seller.businessName,
      bank_code: getBankCode(product.seller.bankName),
      account_number: product.seller.accountNumber,
      percentage_charge: 2.5,
    };

    // return await createSubaccount();
    return await this.paymentService.createSubaccount(createSubaccount);
  }
}
